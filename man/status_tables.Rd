% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/status_tables.R
\name{status_tables}
\alias{status_tables}
\title{Produce Summary and Detailed Tables for Pipeline Messages}
\usage{
status_tables(messages, interactive = knitr::is_html_output())
}
\arguments{
\item{messages}{A dataframe containing the columns \code{sample_id}, \code{group_id}, \code{workflow}, \code{level}, and \code{message}.
Each row represents a message generated by the pipeline, associated with either a specific sample
(when \code{sample_id} is present) or a report group (when \code{sample_id} is NA).}

\item{interactive}{Logical; indicates whether to produce interactive tables (TRUE) or static tables (FALSE).
Defaults to TRUE if the environment supports HTML output, otherwise FALSE. Interactive tables
offer enhanced browsing capabilities, while static tables are best for printed pdf reports.}
}
\value{
A list containing three tables: \code{simpleTable}, \code{detailedSamplesTable}, and \code{detailedGroupsTable}.
\code{simpleTable} is a high-level summary of pipeline steps and associated issues.
\code{detailedSamplesTable} and \code{detailedGroupsTable} provide in-depth insights into issues at the sample and
group levels, respectively. Tables are presented as DT::datatable objects for interactive output or
knitr::kable objects for static output.
}
\description{
This function analyzes a dataframe of pipeline messages, producing three types of tables: a simple summary table,
a detailed table for samples, and a detailed table for report groups. It supports both interactive and static
outputs, allowing users to choose the best format for their needs. Interactive tables are generated using DT::datatable,
providing a dynamic way to explore the data. Static tables are produced with knitr::kable, suitable for static reports
and documentation.
}
\examples{
# Load messages from pipeline output
messages <- readr::read_tsv("path/to/messages.tsv") \%>\%
  tidyr::separate(message, into = c("level", "message"), sep = "\t")

# Generate tables with interactive output
tables <- status_tables(messages, interactive = TRUE)
tables$simpleTable
tables$detailedSamplesTable
tables$detailedGroupsTable

# Note: To view interactive tables, set interactive = TRUE and run in an R environment that supports HTML widgets.
}
